// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String?
  userName         String    @unique
  email            String    @unique
  role             String
  password         String
  image            String
  contactNo        String
  bloodType        String
  location         String
  availability     Boolean   @default(false)
  lastDonationDate String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  donerRequest     Request[] @relation("DonorRequests")
  requesterRequest Request[] @relation("RequesterRequests")

  @@map("user")
}

// model UserProfile {
//   id               String   @id @default(uuid())
//   userId           String   @unique
//   bio              String
//   age              Int
//   lastDonationDate String
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])

//   @@map("userProfile")
// }

model Request {
  id              String        @id @default(uuid())
  donorId         String
  requesterId     String
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  donor     User @relation("DonorRequests", fields: [donorId], references: [id])
  requester User @relation("RequesterRequests", fields: [requesterId], references: [id])

  @@map("request")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
